/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CreditRecord {
  export type RecordStruct = {
    amount: BigNumberish;
    description: string;
    timestamp: BigNumberish;
    creator: AddressLike;
  };

  export type RecordStructOutput = [
    amount: bigint,
    description: string,
    timestamp: bigint,
    creator: string
  ] & {
    amount: bigint;
    description: string;
    timestamp: bigint;
    creator: string;
  };
}

export interface CreditRecordInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createCreditRecord"
      | "getContractBalance"
      | "getCreditRecords"
      | "getRecordCount"
      | "owner"
      | "totalDeposits"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DepositReceived" | "RecordCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createCreditRecord",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createCreditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositReceivedEvent {
  export type InputTuple = [depositor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [depositor: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    amount: BigNumberish,
    description: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    amount: bigint,
    description: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    amount: bigint;
    description: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditRecord extends BaseContract {
  connect(runner?: ContractRunner | null): CreditRecord;
  waitForDeployment(): Promise<this>;

  interface: CreditRecordInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createCreditRecord: TypedContractMethod<
    [_amount: BigNumberish, _description: string],
    [void],
    "payable"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getCreditRecords: TypedContractMethod<
    [_user: AddressLike],
    [CreditRecord.RecordStructOutput[]],
    "view"
  >;

  getRecordCount: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  totalDeposits: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createCreditRecord"
  ): TypedContractMethod<
    [_amount: BigNumberish, _description: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreditRecords"
  ): TypedContractMethod<
    [_user: AddressLike],
    [CreditRecord.RecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecordCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DepositReceived"
  ): TypedContractEvent<
    DepositReceivedEvent.InputTuple,
    DepositReceivedEvent.OutputTuple,
    DepositReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RecordCreated"
  ): TypedContractEvent<
    RecordCreatedEvent.InputTuple,
    RecordCreatedEvent.OutputTuple,
    RecordCreatedEvent.OutputObject
  >;

  filters: {
    "DepositReceived(address,uint256)": TypedContractEvent<
      DepositReceivedEvent.InputTuple,
      DepositReceivedEvent.OutputTuple,
      DepositReceivedEvent.OutputObject
    >;
    DepositReceived: TypedContractEvent<
      DepositReceivedEvent.InputTuple,
      DepositReceivedEvent.OutputTuple,
      DepositReceivedEvent.OutputObject
    >;

    "RecordCreated(address,uint256,string,uint256)": TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;
    RecordCreated: TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;
  };
}
