/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TrustlessCreditInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeCreditRecord"
      | "createCreditRecord"
      | "creditRecords"
      | "getCreditRecord"
      | "recordCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreditRecordClosed" | "CreditRecordCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closeCreditRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCreditRecord",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "closeCreditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCreditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordCount",
    data: BytesLike
  ): Result;
}

export namespace CreditRecordClosedEvent {
  export type InputTuple = [recordId: BigNumberish];
  export type OutputTuple = [recordId: bigint];
  export interface OutputObject {
    recordId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditRecordCreatedEvent {
  export type InputTuple = [
    recordId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish,
    interestRate: BigNumberish,
    term: BigNumberish
  ];
  export type OutputTuple = [
    recordId: bigint,
    borrower: string,
    amount: bigint,
    interestRate: bigint,
    term: bigint
  ];
  export interface OutputObject {
    recordId: bigint;
    borrower: string;
    amount: bigint;
    interestRate: bigint;
    term: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustlessCredit extends BaseContract {
  connect(runner?: ContractRunner | null): TrustlessCredit;
  waitForDeployment(): Promise<this>;

  interface: TrustlessCreditInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeCreditRecord: TypedContractMethod<
    [_recordId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createCreditRecord: TypedContractMethod<
    [_amount: BigNumberish, _interestRate: BigNumberish, _term: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  creditRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        amount: bigint;
        interestRate: bigint;
        term: bigint;
        startTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getCreditRecord: TypedContractMethod<
    [_recordId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        amount: bigint;
        interestRate: bigint;
        term: bigint;
        startTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  recordCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeCreditRecord"
  ): TypedContractMethod<[_recordId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCreditRecord"
  ): TypedContractMethod<
    [_amount: BigNumberish, _interestRate: BigNumberish, _term: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        amount: bigint;
        interestRate: bigint;
        term: bigint;
        startTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreditRecord"
  ): TypedContractMethod<
    [_recordId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        amount: bigint;
        interestRate: bigint;
        term: bigint;
        startTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CreditRecordClosed"
  ): TypedContractEvent<
    CreditRecordClosedEvent.InputTuple,
    CreditRecordClosedEvent.OutputTuple,
    CreditRecordClosedEvent.OutputObject
  >;
  getEvent(
    key: "CreditRecordCreated"
  ): TypedContractEvent<
    CreditRecordCreatedEvent.InputTuple,
    CreditRecordCreatedEvent.OutputTuple,
    CreditRecordCreatedEvent.OutputObject
  >;

  filters: {
    "CreditRecordClosed(uint256)": TypedContractEvent<
      CreditRecordClosedEvent.InputTuple,
      CreditRecordClosedEvent.OutputTuple,
      CreditRecordClosedEvent.OutputObject
    >;
    CreditRecordClosed: TypedContractEvent<
      CreditRecordClosedEvent.InputTuple,
      CreditRecordClosedEvent.OutputTuple,
      CreditRecordClosedEvent.OutputObject
    >;

    "CreditRecordCreated(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      CreditRecordCreatedEvent.InputTuple,
      CreditRecordCreatedEvent.OutputTuple,
      CreditRecordCreatedEvent.OutputObject
    >;
    CreditRecordCreated: TypedContractEvent<
      CreditRecordCreatedEvent.InputTuple,
      CreditRecordCreatedEvent.OutputTuple,
      CreditRecordCreatedEvent.OutputObject
    >;
  };
}
