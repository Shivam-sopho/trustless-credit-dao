/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LoanSystem {
  export type LoanStruct = {
    borrower: AddressLike;
    amount: BigNumberish;
    duration: BigNumberish;
    interestRate: BigNumberish;
    startTime: BigNumberish;
    dueTime: BigNumberish;
    isRepaid: boolean;
    creditScore: BigNumberish;
    aiReasoning: string;
  };

  export type LoanStructOutput = [
    borrower: string,
    amount: bigint,
    duration: bigint,
    interestRate: bigint,
    startTime: bigint,
    dueTime: bigint,
    isRepaid: boolean,
    creditScore: bigint,
    aiReasoning: string
  ] & {
    borrower: string;
    amount: bigint;
    duration: bigint;
    interestRate: bigint;
    startTime: bigint;
    dueTime: bigint;
    isRepaid: boolean;
    creditScore: bigint;
    aiReasoning: string;
  };

  export type LoanRequestStruct = {
    borrower: AddressLike;
    amount: BigNumberish;
    duration: BigNumberish;
    purpose: string;
    metadata: string;
    timestamp: BigNumberish;
    isApproved: boolean;
    creditScore: BigNumberish;
    fraudScore: BigNumberish;
    aiReasoning: string;
  };

  export type LoanRequestStructOutput = [
    borrower: string,
    amount: bigint,
    duration: bigint,
    purpose: string,
    metadata: string,
    timestamp: bigint,
    isApproved: boolean,
    creditScore: bigint,
    fraudScore: bigint,
    aiReasoning: string
  ] & {
    borrower: string;
    amount: bigint;
    duration: bigint;
    purpose: string;
    metadata: string;
    timestamp: bigint;
    isApproved: boolean;
    creditScore: bigint;
    fraudScore: bigint;
    aiReasoning: string;
  };
}

export interface LoanSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FRAUD_SCORE"
      | "MIN_CREDIT_SCORE"
      | "activeLoans"
      | "approveLoan"
      | "getActiveLoans"
      | "getLoanRequests"
      | "loanRequests"
      | "owner"
      | "rejectLoan"
      | "repayLoan"
      | "requestLoan"
      | "totalLoans"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LoanApproved"
      | "LoanRejected"
      | "LoanRepaid"
      | "LoanRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_FRAUD_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CREDIT_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeLoans",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLoan",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveLoans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectLoan",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLoan",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLoans",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_FRAUD_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CREDIT_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace LoanApprovedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish,
    creditScore: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    amount: bigint,
    duration: bigint,
    creditScore: bigint
  ];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    duration: bigint;
    creditScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRejectedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    creditScore: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    borrower: string,
    amount: bigint,
    creditScore: bigint,
    reason: string
  ];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    creditScore: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    loanId: BigNumberish
  ];
  export type OutputTuple = [borrower: string, amount: bigint, loanId: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    loanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRequestedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [
    borrower: string,
    amount: bigint,
    duration: bigint,
    purpose: string
  ];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    duration: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LoanSystem extends BaseContract {
  connect(runner?: ContractRunner | null): LoanSystem;
  waitForDeployment(): Promise<this>;

  interface: LoanSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FRAUD_SCORE: TypedContractMethod<[], [bigint], "view">;

  MIN_CREDIT_SCORE: TypedContractMethod<[], [bigint], "view">;

  activeLoans: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        borrower: string;
        amount: bigint;
        duration: bigint;
        interestRate: bigint;
        startTime: bigint;
        dueTime: bigint;
        isRepaid: boolean;
        creditScore: bigint;
        aiReasoning: string;
      }
    ],
    "view"
  >;

  approveLoan: TypedContractMethod<
    [
      _borrower: AddressLike,
      _requestId: BigNumberish,
      _interestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getActiveLoans: TypedContractMethod<
    [_borrower: AddressLike],
    [LoanSystem.LoanStructOutput[]],
    "view"
  >;

  getLoanRequests: TypedContractMethod<
    [_borrower: AddressLike],
    [LoanSystem.LoanRequestStructOutput[]],
    "view"
  >;

  loanRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string
      ] & {
        borrower: string;
        amount: bigint;
        duration: bigint;
        purpose: string;
        metadata: string;
        timestamp: bigint;
        isApproved: boolean;
        creditScore: bigint;
        fraudScore: bigint;
        aiReasoning: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rejectLoan: TypedContractMethod<
    [_borrower: AddressLike, _requestId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  repayLoan: TypedContractMethod<[_loanId: BigNumberish], [void], "payable">;

  requestLoan: TypedContractMethod<
    [
      _amount: BigNumberish,
      _duration: BigNumberish,
      _purpose: string,
      _metadata: string,
      _creditScore: BigNumberish,
      _fraudScore: BigNumberish,
      _aiReasoning: string
    ],
    [void],
    "nonpayable"
  >;

  totalLoans: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FRAUD_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CREDIT_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeLoans"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        borrower: string;
        amount: bigint;
        duration: bigint;
        interestRate: bigint;
        startTime: bigint;
        dueTime: bigint;
        isRepaid: boolean;
        creditScore: bigint;
        aiReasoning: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveLoan"
  ): TypedContractMethod<
    [
      _borrower: AddressLike,
      _requestId: BigNumberish,
      _interestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveLoans"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [LoanSystem.LoanStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoanRequests"
  ): TypedContractMethod<
    [_borrower: AddressLike],
    [LoanSystem.LoanRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string
      ] & {
        borrower: string;
        amount: bigint;
        duration: bigint;
        purpose: string;
        metadata: string;
        timestamp: bigint;
        isApproved: boolean;
        creditScore: bigint;
        fraudScore: bigint;
        aiReasoning: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectLoan"
  ): TypedContractMethod<
    [_borrower: AddressLike, _requestId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[_loanId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "requestLoan"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _duration: BigNumberish,
      _purpose: string,
      _metadata: string,
      _creditScore: BigNumberish,
      _fraudScore: BigNumberish,
      _aiReasoning: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalLoans"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "LoanApproved"
  ): TypedContractEvent<
    LoanApprovedEvent.InputTuple,
    LoanApprovedEvent.OutputTuple,
    LoanApprovedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRejected"
  ): TypedContractEvent<
    LoanRejectedEvent.InputTuple,
    LoanRejectedEvent.OutputTuple,
    LoanRejectedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LoanRequested"
  ): TypedContractEvent<
    LoanRequestedEvent.InputTuple,
    LoanRequestedEvent.OutputTuple,
    LoanRequestedEvent.OutputObject
  >;

  filters: {
    "LoanApproved(address,uint256,uint256,uint256)": TypedContractEvent<
      LoanApprovedEvent.InputTuple,
      LoanApprovedEvent.OutputTuple,
      LoanApprovedEvent.OutputObject
    >;
    LoanApproved: TypedContractEvent<
      LoanApprovedEvent.InputTuple,
      LoanApprovedEvent.OutputTuple,
      LoanApprovedEvent.OutputObject
    >;

    "LoanRejected(address,uint256,uint256,string)": TypedContractEvent<
      LoanRejectedEvent.InputTuple,
      LoanRejectedEvent.OutputTuple,
      LoanRejectedEvent.OutputObject
    >;
    LoanRejected: TypedContractEvent<
      LoanRejectedEvent.InputTuple,
      LoanRejectedEvent.OutputTuple,
      LoanRejectedEvent.OutputObject
    >;

    "LoanRepaid(address,uint256,uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "LoanRequested(address,uint256,uint256,string)": TypedContractEvent<
      LoanRequestedEvent.InputTuple,
      LoanRequestedEvent.OutputTuple,
      LoanRequestedEvent.OutputObject
    >;
    LoanRequested: TypedContractEvent<
      LoanRequestedEvent.InputTuple,
      LoanRequestedEvent.OutputTuple,
      LoanRequestedEvent.OutputObject
    >;
  };
}
