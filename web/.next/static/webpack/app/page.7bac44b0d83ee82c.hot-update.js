"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/creditContract.ts":
/*!*********************************!*\
  !*** ./utils/creditContract.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCreditRecord: () => (/* binding */ createCreditRecord),\n/* harmony export */   getContractBalance: () => (/* binding */ getContractBalance),\n/* harmony export */   getCreditContract: () => (/* binding */ getCreditContract),\n/* harmony export */   getUserRecords: () => (/* binding */ getUserRecords),\n/* harmony export */   setupNetwork: () => (/* binding */ setupNetwork),\n/* harmony export */   withdrawFunds: () => (/* binding */ withdrawFunds)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n\n// IOTA EVM Testnet configuration\nconst IOTA_EVM_TESTNET = {\n    chainId: 1075,\n    rpcUrl: 'https://evm.wasp.sc.iota.org',\n    name: 'IOTA EVM Testnet',\n    currency: 'IOTA',\n    explorer: 'https://explorer.wasp.sc.iota.org'\n};\nconst CREDIT_CONTRACT_ADDRESS = '0xYOUR_DEPLOYED_CONTRACT_ADDRESS'; // Replace with your deployed contract address\nconst CreditRecordABI = [\n    \"function createCreditRecord(uint256 amount, string memory description) public payable\",\n    \"function getCreditRecords(address user) public view returns (tuple(uint256 amount, string description, uint256 timestamp, address creator)[])\",\n    \"function getContractBalance() public view returns (uint256)\",\n    \"function withdraw() public\"\n];\nconst getCreditContract = async (signer)=>{\n    if (!CREDIT_CONTRACT_ADDRESS || CREDIT_CONTRACT_ADDRESS === '0xYOUR_DEPLOYED_CONTRACT_ADDRESS') {\n        throw new Error('Contract address not set. Please update CREDIT_CONTRACT_ADDRESS in creditContract.ts');\n    }\n    return new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(CREDIT_CONTRACT_ADDRESS, CreditRecordABI, signer);\n};\nconst createCreditRecord = async (contract, amount, description)=>{\n    try {\n        const tx = await contract.createCreditRecord(amount, description, {\n            value: ethers__WEBPACK_IMPORTED_MODULE_1__.parseEther('0.01')\n        });\n        const receipt = await tx.wait();\n        return receipt;\n    } catch (error) {\n        console.error('Error creating credit record:', error);\n        throw new Error(error.reason || error.message || 'Failed to create credit record');\n    }\n};\nconst getUserRecords = async (contract, userAddress)=>{\n    try {\n        const records = await contract.getCreditRecords(userAddress);\n        return records.map((record)=>({\n                amount: Number(record.amount),\n                description: record.description,\n                timestamp: new Date(Number(record.timestamp) * 1000).toLocaleString(),\n                creator: record.creator\n            }));\n    } catch (error) {\n        console.error('Error getting user records:', error);\n        throw new Error(error.reason || error.message || 'Failed to get user records');\n    }\n};\nconst getContractBalance = async (contract)=>{\n    try {\n        const balance = await contract.getContractBalance();\n        return ethers__WEBPACK_IMPORTED_MODULE_1__.formatEther(balance);\n    } catch (error) {\n        console.error('Error getting contract balance:', error);\n        throw new Error(error.reason || error.message || 'Failed to get contract balance');\n    }\n};\nconst withdrawFunds = async (contract)=>{\n    try {\n        const tx = await contract.withdraw();\n        const receipt = await tx.wait();\n        return receipt;\n    } catch (error) {\n        console.error('Error withdrawing funds:', error);\n        throw new Error(error.reason || error.message || 'Failed to withdraw funds');\n    }\n};\nconst setupNetwork = async ()=>{\n    if (!window.ethereum) {\n        throw new Error('MetaMask is not installed');\n    }\n    try {\n        await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n                {\n                    chainId: \"0x\".concat(IOTA_EVM_TESTNET.chainId.toString(16)),\n                    chainName: IOTA_EVM_TESTNET.name,\n                    nativeCurrency: {\n                        name: IOTA_EVM_TESTNET.currency,\n                        symbol: IOTA_EVM_TESTNET.currency,\n                        decimals: 18\n                    },\n                    rpcUrls: [\n                        IOTA_EVM_TESTNET.rpcUrl\n                    ],\n                    blockExplorerUrls: [\n                        IOTA_EVM_TESTNET.explorer\n                    ]\n                }\n            ]\n        });\n    } catch (error) {\n        if (error.code !== 4001) {\n            console.error('Error setting up network:', error);\n            throw new Error('Failed to setup IOTA EVM Testnet');\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/creditContract.ts\n"));

/***/ })

});